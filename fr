local hacker = game:GetService("Players").LocalPlayer
local service = game:GetService("RunService")

-- Define a custom distance for the touch interest
local customDistance = 0 -- Default distance set to 0
local magnetDelay = 0 -- Default delay
local magnetDelayEnabled = false -- Default magnet delay state

-- Function to fire touch interest at a custom distance
local function magBall(ball)
  if ball and hacker.Character then
      local rightArm = hacker.Character:FindFirstChild("Right Arm")
      local leftArm = hacker.Character:FindFirstChild("Left Arm")

      if rightArm and leftArm then
          local distance = (hacker.Character.PrimaryPart.Position - ball.Position).Magnitude
          if distance <= customDistance then
              firetouchinterest(rightArm, ball, 0)
              firetouchinterest(leftArm, ball, 0)
              firetouchinterest(rightArm, ball, 1)
              firetouchinterest(leftArm, ball, 1)
          end
      end
  end
end

local magEnabled = false -- Variable to keep track of magnet state

local function startMagnetLoop()
  task.spawn(function()
      while true do
          if magEnabled then
              for i, v in pairs(workspace:GetChildren()) do
                  if v.Name == "Football" and v:IsA("BasePart") then
                      magBall(v)
                  end
              end
          end
          if magnetDelayEnabled then
              task.wait(magnetDelay)
          else
              task.wait() -- Short wait to avoid blocking the loop
          end
      end
  end)
end

startMagnetLoop() -- Initialize magnet checking

-- UI library integration with OrionLib
                                    local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/thanhdat4461/OrionMoblie/main/source')))()
local Window = OrionLib:MakeWindow({Name = "Tyrant Hub", HidePremium = false, SaveConfig = true, ConfigFolder = "OrionTest"})

local Tab = Window:MakeTab({
  Name = "Catching",
  Icon = "rbxassetid://4483345998",
  PremiumOnly = false
})

-- Section for Non-Laggy Magnets
local NonLaggySection = Tab:AddSection({Name = "Non Laggy Magnets"})

NonLaggySection:AddToggle({
  Name = "Magnets",
  Default = false,
  Callback = function(value)
      magEnabled = value
  end,
})

NonLaggySection:AddSlider({
  Name = "Magnets Range",
  Min = 0,
  Max = 25,
  Default = 0,
  Color = Color3.fromRGB(255, 255, 255),
  Increment = 1,
  ValueName = "Range",
  Callback = function(value)
      customDistance = value
  end,
})

NonLaggySection:AddToggle({
  Name = "Magnets Delay",
  Default = false,
  Callback = function(value)
      magnetDelayEnabled = value
  end,
})

NonLaggySection:AddSlider({
  Name = "Magnets Delay",
  Min = 0,
  Max = 1,
  Default = 0,
  Color = Color3.fromRGB(255, 255, 255),
  Increment = 0.1,
  ValueName = "Delay",
  Callback = function(value)
      magnetDelay = value
  end,
})

-- Section for Laggy Magnets
local LaggySection = Tab:AddSection({Name = "Laggy Magnets"})

local laggyMagnetsEnabled = false
local laggyMagnetsDistance = 0

LaggySection:AddToggle({
  Name = "Laggy Magnets",
  Default = false,
  Callback = function(value)
      laggyMagnetsEnabled = value
  end,
})

LaggySection:AddSlider({
  Name = "Laggy Magnets",
  Min = 0,
  Max = 30,
  Default = 0,
  Color = Color3.fromRGB(255, 255, 255),
  Increment = 1,
  ValueName = "Distance",
  Callback = function(value)
      laggyMagnetsDistance = value
  end,
})

-- Main loop for laggy magnets
task.spawn(function()
  while wait(3) do
      if laggyMagnetsEnabled then
          for _, v in pairs(workspace:GetDescendants()) do
              if v:IsA("BasePart") and v.Name == "Football" then
                  v.Size = Vector3.new(laggyMagnetsDistance, laggyMagnetsDistance, laggyMagnetsDistance)
                  v.Transparency = 0
              end
          end
      end
  end
end)

                                    local plr = game:GetService("Players").LocalPlayer
                                    local armLengthIncrease = 0 -- Default arm length increase (set to 0 initially)
                                    local armsTransparent = false -- Default transparency state
                                    local handSizeEnabled = false -- Default state for hand size toggle

                                    local originalSizes = {} -- Table to store original arm sizes

                                    local function onCharacterAdded(character)
                                        local function resizeArms()
                                            local leftArm = character:FindFirstChild("Left Arm") or character:FindFirstChild("LeftUpperArm")
                                            local rightArm = character:FindFirstChild("Right Arm") or character:FindFirstChild("RightUpperArm")

                                            if leftArm and rightArm then
                                                if not originalSizes[character] then
                                                    -- Store the original sizes
                                                    originalSizes[character] = {
                                                        leftArmSize = leftArm.Size,
                                                        rightArmSize = rightArm.Size,
                                                        leftShoulderC0 = leftArm:FindFirstChildOfClass("Motor6D") and leftArm:FindFirstChildOfClass("Motor6D").C0,
                                                        rightShoulderC0 = rightArm:FindFirstChildOfClass("Motor6D") and rightArm:FindFirstChildOfClass("Motor6D").C0
                                                    }
                                                end

                                                if handSizeEnabled then
                                                    -- Increase arm length by the specified units
                                                    local lengthIncrease = Vector3.new(0, armLengthIncrease, 0)
                                                    leftArm.Size = originalSizes[character].leftArmSize + lengthIncrease
                                                    rightArm.Size = originalSizes[character].rightArmSize + lengthIncrease

                                                    -- Adjust Motor6D if using R15 model
                                                    if leftArm:FindFirstChildOfClass("Motor6D") then
                                                        local leftShoulder = leftArm:FindFirstChildOfClass("Motor6D")
                                                        leftShoulder.C0 = originalSizes[character].leftShoulderC0 * CFrame.new(0, armLengthIncrease / 2, 0) -- Adjust the offset to half of the length increase

                                                        local rightShoulder = rightArm:FindFirstChildOfClass("Motor6D")
                                                        rightShoulder.C0 = originalSizes[character].rightShoulderC0 * CFrame.new(0, armLengthIncrease / 2, 0) -- Adjust the offset to half of the length increase
                                                    end

                                                    -- Set arm transparency if ShowHandSize is enabled
                                                    local transparencyValue = armsTransparent and 1 or 0
                                                    leftArm.Transparency = transparencyValue
                                                    rightArm.Transparency = transparencyValue
                                                else
                                                    -- Reset to original sizes and make them visible
                                                    leftArm.Size = originalSizes[character].leftArmSize
                                                    rightArm.Size = originalSizes[character].rightArmSize

                                                    -- Reset Motor6D if using R15 model
                                                    if leftArm:FindFirstChildOfClass("Motor6D") then
                                                        local leftShoulder = leftArm:FindFirstChildOfClass("Motor6D")
                                                        leftShoulder.C0 = originalSizes[character].leftShoulderC0

                                                        local rightShoulder = rightArm:FindFirstChildOfClass("Motor6D")
                                                        rightShoulder.C0 = originalSizes[character].rightShoulderC0
                                                    end

                                                    -- Ensure arms are visible
                                                    leftArm.Transparency = 0
                                                    rightArm.Transparency = 0
                                                end
                                            end
                                        end

                                        -- Call the function to resize arms
                                        resizeArms()
                                    end

                                    -- Connect the function to CharacterAdded event
                                    plr.CharacterAdded:Connect(onCharacterAdded)

                                    -- If the character is already loaded, apply the changes immediately
                                    if plr.Character then
                                        onCharacterAdded(plr.Character)
                                    end

                                    -- UI Section and Controls
                                    local Section = Tab:AddSection({
                                        Name = "IncreasedHands"
                                    })

                                    Tab:AddToggle({
                                        Name = "Increased Hand Size",
                                        Default = false,
                                        Callback = function(Value)
                                            handSizeEnabled = Value
                                            if plr.Character then
                                                onCharacterAdded(plr.Character)
                                            end
                                        end    
                                    })

                                    Tab:AddSlider({
                                        Name = "HandSizeDistance",
                                        Min = 0,
                                        Max = 30,
                                        Default = 0,
                                        Color = Color3.fromRGB(255,255,255),
                                        Increment = 1,
                                        ValueName = "Distance",
                                        Callback = function(Value)
                                            armLengthIncrease = Value
                                            if plr.Character and handSizeEnabled then
                                                onCharacterAdded(plr.Character)
                                            end
                                        end    
                                    })

                                    Tab:AddToggle({
                                        Name = "HideHands",
                                        Default = false,
                                        Callback = function(Value)
                                            armsTransparent = Value
                                            if plr.Character then
                                                onCharacterAdded(plr.Character)
                                            end
                                        end    
                                    })

                                local playerr = game:GetService("Players").LocalPlayer

                                    local Tab = Window:MakeTab({
                                        Name = "Physics",
                                        Icon = "rbxassetid://4483345998",
                                        PremiumOnly = false
                                    })
                                    local jumppowerEnabled = false
                                    local currentJumpPower = 50
                                    local walkspeedEnabled = false
                                    local currentWalkspeed = 20 -- Default Roblox walkspeed

                                    Tab:AddToggle({
                                        Name = "Walkspeed",
                                        Default = false,
                                        Callback = function(Value)
                                            walkspeedEnabled = Value
                                            if walkspeedEnabled then
                                                playerr.Character.Humanoid.WalkSpeed = currentWalkspeed
                                                -- Start the loop to maintain the walkspeed
                                                spawn(function()
                                                    while walkspeedEnabled do
                                                        if playerr and playerr.Character and playerr.Character:FindFirstChild("Humanoid") then
                                                            playerr.Character.Humanoid.WalkSpeed = currentWalkspeed
                                                        end
                                                        wait(2) -- Adjust the wait time as needed
                                                    end
                                                end)
                                            else
                                                playerr.Character.Humanoid.WalkSpeed = 20 -- Reset to default walkspeed
                                            end
                                        end    
                                    })

                                    Tab:AddSlider({
                                        Name = "Walkspeed",
                                        Min = 20,
                                        Max = 23,
                                        Default = 20,
                                        Color = Color3.fromRGB(255,255,255),
                                        Increment = 0.1,
                                        ValueName = "Walkspeed",
                                        Callback = function(Value)
                                            currentWalkspeed = Value
                                            if walkspeedEnabled then
                                                playerr.Character.Humanoid.WalkSpeed = currentWalkspeed
                                            end
                                        end    
                                    })

                                    Tab:AddToggle({
                                        Name = "JumpPower",
                                        Default = false,
                                        Callback = function(Value)
                                            jumppowerEnabled = Value
                                            if jumppowerEnabled then
                                                playerr.Character.Humanoid.JumpPower = currentJumpPower
                                                -- Start the loop to maintain the jumppower
                                                spawn(function()
                                                    while jumppowerEnabled do
                                                        if playerr and playerr.Character and playerr.Character:FindFirstChild("Humanoid") then
                                                            playerr.Character.Humanoid.JumpPower = currentJumpPower
                                                        end
                                                        wait(2) -- Adjust the wait time as needed
                                                    end
                                                end)
                                            else
                                                playerr.Character.Humanoid.JumpPower = 50 -- Reset to default jump power
                                            end
                                        end
                                    })

                                    Tab:AddSlider({
                                        Name = "Jumppower",
                                        Min = 50,
                                        Max = 53,
                                        Default = 50,
                                        Color = Color3.fromRGB(255, 255, 255),
                                        Increment = 0.1,
                                        ValueName = "JumpPower",
                                        Callback = function(Value)
                                            currentJumpPower = Value
                                            if jumppowerEnabled then
                                                playerr.Character.Humanoid.JumpPower = currentJumpPower
                                            end
                                        end
                                    })






                  local Section = Tab:AddSection({
                    Name = "Follow"
                  })


                                    local AutoFollowQb = false
                                    local followCarrierTask

                                    local function FollowCarrier()
                                        while AutoFollowQb do
                                            local carrier = game:GetService("ReplicatedStorage").Values.Carrier.Value
                                            if carrier and carrier:IsDescendantOf(game:GetService("Players")) and carrier.Team ~= game:GetService("Players").LocalPlayer.Team then
                                                local humanoid = game:GetService("Players").LocalPlayer.Character and game:GetService("Players").LocalPlayer.Character:FindFirstChild("Humanoid")
                                                if humanoid then
                                                    humanoid:MoveTo(carrier.Character.Torso.Position)
                                                end
                                            end
                                            wait()
                                        end
                                    end

                                    local function ToggleFollowCarrier(value)
                                        AutoFollowQb = value
                                        if value then
                                            followCarrierTask = task.spawn(FollowCarrier)
                                        else
                                            followCarrierTask = nil -- This is optional, for clarity
                                        end
                                    end

                                    Tab:AddToggle({
                                        Name = "Follow Ball Carrier",
                                        Default = false,
                                        Callback = ToggleFollowCarrier,
                                    })









                                     local Tab = Window:MakeTab({
                                     Name = "Other",
                                   Icon = "rbxassetid://4483345998",
                                   PremiumOnly = false
                                   })


                                    local boostfps = false
                                    local originalMaterials = {}

                                    Tab:AddToggle({
                                        Name = "FPS BOOST/LOW GRAPHICS",
                                        Default = false,
                                        Callback = function(Value)
                                            boostfps = Value
                                            if Value then
                                                for i, v in next, workspace:GetDescendants() do
                                                    if v:IsA("Part") and v.Material then
                                                        originalMaterials[v] = v.Material
                                                        v.Material = Enum.Material.SmoothPlastic
                                                    end
                                                end
                                            else
                                                for i, v in next, workspace:GetDescendants() do
                                                    if v:IsA("Part") and originalMaterials[v] then
                                                        v.Material = originalMaterials[v]
                                                        originalMaterials[v] = nil
                                                    end
                                                end
                                            end
                                        end
                                    })
